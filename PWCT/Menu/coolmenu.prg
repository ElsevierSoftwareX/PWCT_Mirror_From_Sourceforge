
	**********************************************************
	*
	* 05/26/2008     COOLMENU.PRG     16:43:43
	*
	**********************************************************
	*
	*  Author by : 
	*
	*  This PROGRAM was automatically generated by OD_GENMENU
	*
	**********************************************************


*** Begin OD_Menu

#Include  API_Menu.h

Private po_Menu

po_Menu = NewObject( 'PopupMenu', 'OwnerDrawn_Menu' )
If (VarType( po_Menu ) != 'O')
	Return
endif

Local array la_PopupHandle[1]

** Just in case somethings going wrong (for debugging purposes)
On key label ALT+F10 Do QuitProg
On shutdown Do QuitProg
Set SysMenu save  && save VFP system menu

If !('COOLMENU' $ set( 'Procedure' ))
	Set procedure to COOLMENU additive
endif

With po_Menu
	Dimension .aMenuPad[ 10, 2 ]
	Dimension la_PopupHandle[ 48 ]

	.hWndParent = menu_form.hwnd
	.Gdiplus_Start()
	.lUseGradientPad = .F.
	.lThemed = .F.
	.lUseGradient = .T.
	.nHiliteStyle = 16
	.lEnhancedHilite = .T.
	.SetRightColor( GetSysColor( 5 ), .F. )
	.hFontCustom = .CreateCustomFont( .F., .F., .T. )

	*** Create Menu Pad
	.aMenuPad[ 1, 1 ] = 'File'
	.aMenuPad[ 2, 1 ] = 'Edit'
	.aMenuPad[ 3, 1 ] = 'Data'
	.aMenuPad[ 4, 1 ] = 'Code'
	.aMenuPad[ 5, 1 ] = 'Veto'
	.aMenuPad[ 6, 1 ] = 'RPWI'
	.aMenuPad[ 7, 1 ] = 'Transporter'
	.aMenuPad[ 8, 1 ] = 'Package'
	.aMenuPad[ 9, 1 ] = 'Tools'
	.aMenuPad[ 10, 1 ] = 'Help'
	.CreatePad('myODMenu',menu_form)

	*** Create popup (index no. = 1)
	.CreatePopupItem( 8 )
	.aPopupItem[ 1 ] = 'New'
	.aPopupBmp[ 1 ] = 'new.bmp'
	.aPopupItem[ 2 ] = 'Open'
	.aPopupBmp[ 2 ] = 'open.bmp'
	.aPopupItem[ 3 ] = 'Close'
	.aPopupBmp[ 3 ] = 'wzclose.bmp'
	.aPopupItem[ 5 ] = 'Save'
	.aPopupBmp[ 5 ] = 'save.bmp'
	.aPopupItem[ 6 ] = 'Save As'
	.aPopupItem[ 8 ] = 'Exit'
	la_PopupHandle[ 1 ] = .CreatePopup( 100001, 1 )

	*** Create popup (index no. = 2)
	.CreatePopupItem( 5 )
	.aPopupItem[ 1 ] = 'Cu&t'
	.aPopupBmp[ 1 ] = 'cut.bmp'
	.aPopupItem[ 2 ] = '&Copy'
	.aPopupBmp[ 2 ] = 'copy.bmp'
	.aPopupItem[ 3 ] = '&Paste'
	.aPopupBmp[ 3 ] = 'paste.bmp'
	.aPopupItem[ 5 ] = 'Search'
	.aPopupBmp[ 5 ] = 'wzlocate.bmp'
	la_PopupHandle[ 2 ] = .CreatePopup( 200001, 2 )

	*** Create popup (index no. = 3)
	.CreatePopupItem( 22 )
	.aPopupItem[ 1 ] = 'New &Atom'
	.aPopupBmp[ 1 ] = 'new.bmp'
	.aPopupItem[ 2 ] = 'New Shell'
	.aPopupItem[ 3 ] = 'New SubShell'
	.aPopupItem[ 4 ] = 'New Electron'
	.aPopupItem[ 6 ] = 'Edit Electron'
	.aPopupBmp[ 6 ] = 'wzedit.bmp'
	.aPopupItem[ 7 ] = 'Edit Atom'
	.aPopupItem[ 8 ] = 'Edit Shell'
	.aPopupItem[ 9 ] = 'Edit SubShell'
	.aPopupItem[ 11 ] = 'Delete Electron'
	.aPopupBmp[ 11 ] = 'wzdelete.bmp'
	.aPopupItem[ 12 ] = 'Delete SubShell'
	.aPopupItem[ 13 ] = 'Delete Shell'
	.aPopupItem[ 14 ] = 'Delete Atom'
	.aPopupItem[ 16 ] = 'New Vessell'
	.aPopupBmp[ 16 ] = 'new.bmp'
	.aPopupItem[ 17 ] = 'Edit Vessell'
	.aPopupItem[ 18 ] = 'Delete Vessel'
	.aPopupItem[ 20 ] = 'New Reaction'
	.aPopupBmp[ 20 ] = 'new.bmp'
	.aPopupItem[ 21 ] = 'Edit Reaction'
	.aPopupItem[ 22 ] = 'Delete Reaction'
	la_PopupHandle[ 3 ] = .CreatePopup( 300001, 3 )

	*** Create popup (index no. = 4)
	.CreatePopupItem( 17 )
	.aPopupItem[ 1 ] = 'New Circuit'
	.aPopupBmp[ 1 ] = 'new.bmp'
	.aPopupItem[ 2 ] = 'New Branch'
	.aPopupItem[ 3 ] = 'New Resistance'
	.aPopupItem[ 5 ] = 'Edit Circuit'
	.aPopupBmp[ 5 ] = 'wzedit.bmp'
	.aPopupItem[ 6 ] = 'Edit Branch'
	.aPopupItem[ 7 ] = 'Edit Resistance'
	.aPopupItem[ 9 ] = 'Delete Circuit'
	.aPopupBmp[ 9 ] = 'wzdelete.bmp'
	.aPopupItem[ 10 ] = 'Delete Branch'
	.aPopupItem[ 11 ] = 'Delete Resistance'
	.aPopupItem[ 13 ] = 'Main Circuit'
	.aPopupItem[ 14 ] = 'Main Resistance'
	.aPopupItem[ 16 ] = 'Main Switch'
	.aPopupItem[ 17 ] = 'Branch Switch'
	la_PopupHandle[ 4 ] = .CreatePopup( 400001, 4 )

	*** Create popup (index no. = 5)
	.CreatePopupItem( 14 )
	.aPopupItem[ 1 ] = 'New Veto'
	.aPopupBmp[ 1 ] = 'new.bmp'
	.aPopupItem[ 2 ] = 'New Channel'
	.aPopupItem[ 3 ] = 'New Connection'
	.aPopupItem[ 5 ] = 'Sender Veto'
	.aPopupItem[ 6 ] = 'Reciver Veto'
	.aPopupItem[ 8 ] = 'Edit Veto'
	.aPopupBmp[ 8 ] = 'wzedit.bmp'
	.aPopupItem[ 9 ] = 'Edit Channel'
	.aPopupItem[ 10 ] = 'Edit Connection'
	.aPopupItem[ 12 ] = 'Delete Veto'
	.aPopupBmp[ 12 ] = 'wzdelete.bmp'
	.aPopupItem[ 13 ] = 'Delete Channel'
	.aPopupItem[ 14 ] = 'Delete Connection'
	la_PopupHandle[ 5 ] = .CreatePopup( 500001, 5 )

	*** Create popup (index no. = 6)
	.CreatePopupItem( 17 )
	.aPopupItem[ 1 ] = 'RPWI - Goal Designer'
	.aPopupItem[ 2 ] = 'Goal Viewer Window'
	.aPopupItem[ 4 ] = 'New Goal'
	.aPopupItem[ 5 ] = 'Edit Goal'
	.aPopupItem[ 6 ] = 'Delete Goal'
	.aPopupItem[ 8 ] = 'Domain Tree'
	.aPopupItem[ 9 ] = 'Install Component'
	.aPopupItem[ 10 ] = 'Reinstall Component'
	.aPopupItem[ 11 ] = 'Uninstall Component'
	.aPopupItem[ 13 ] = 'Default Analysis Application or Custom Engine'
	.aPopupItem[ 14 ] = 'RPWI Server Contract Writer'
	.aPopupItem[ 15 ] = 'Default Code Extractor Application'
	.aPopupItem[ 17 ] = 'Invoke Code Extractor'
	la_PopupHandle[ 6 ] = .CreatePopup( 600001, 6 )

	*** Create popup (index no. = 7)
	.CreatePopupItem( 8 )
	.aPopupItem[ 1 ] = 'Programming Languages List'
	.aPopupItem[ 2 ] = 'Language Syntax'
	.aPopupItem[ 4 ] = 'Interaction Designer'
	.aPopupItem[ 5 ] = 'Interaction Pages Generator'
	.aPopupItem[ 7 ] = 'Transporter Designer'
	.aPopupItem[ 8 ] = 'Syntax to Code Mask'
	la_PopupHandle[ 7 ] = .CreatePopup( 700001, 7 )

	*** Create popup (index no. = 8)
	.CreatePopupItem( 5 )
	.aPopupItem[ 1 ] = 'New Package'
	.aPopupItem[ 3 ] = 'Open Package'
	.aPopupItem[ 5 ] = 'Install Package'
	la_PopupHandle[ 8 ] = .CreatePopup( 800001, 8 )

	*** Create popup (index no. = 9)
	.CreatePopupItem( 12 )
	.aPopupItem[ 1 ] = 'Server Code Editor'
	.aPopupItem[ 3 ] = 'Server Form Designer'
	.aPopupItem[ 4 ] = 'Server Menu Designer'
	.aPopupItem[ 5 ] = 'Server Report Dersigner'
	.aPopupItem[ 6 ] = 'Server Data Manager'
	.aPopupItem[ 8 ] = 'Server Wizard'
	.aPopupItem[ 10 ] = 'Calculator'
	.aPopupItem[ 11 ] = 'NotePad'
	.aPopupItem[ 12 ] = 'Paint'
	la_PopupHandle[ 9 ] = .CreatePopup( 900001, 9 )

	*** Create popup (index no. = 10)
	.CreatePopupItem( 17 )
	.aPopupItem[ 1 ] = 'DoubleS Framework Help'
	.aPopupItem[ 3 ] = 'DoubleS Research'
	.aPopupItem[ 4 ] = 'DoubleS Introduction Lecture'
	.aPopupItem[ 5 ] = 'DoubleS Project Goals'
	.aPopupItem[ 6 ] = 'DoubleS FAQ'
	.aPopupItem[ 8 ] = 'DoubleS Library'
	.aPopupItem[ 9 ] = 'DoubleS Gallery'
	.aPopupItem[ 11 ] = '(x)Harbour'
	.aPopupItem[ 12 ] = 'MiniGUI'
	.aPopupItem[ 13 ] = 'TSBrowse'
	.aPopupItem[ 15 ] = 'Project Team'
	.aPopupItem[ 17 ] = 'About'
	.aPopupBmp[ 17 ] = 'help.bmp'
	la_PopupHandle[ 10 ] = .CreatePopup( 1000001, 10 )

	*** Create popup (index no. = 11)
	.CreatePopupItem( 4 )
	.aPopupItem[ 1 ] = 'In Server'
	.aPopupItem[ 2 ] = 'In Data Unit'
	.aPopupItem[ 3 ] = 'In Code Unit'
	.aPopupItem[ 4 ] = 'In Veto Unit'
	la_PopupHandle[ 11 ] = .CreatePopup( 210001, 11 )
	.SetSubPopup( la_PopupHandle[ 2 ], 5, 11 )

	*** Create popup (index no. = 12)
	.CreatePopupItem( 8 )
	.aPopupItem[ 1 ] = 'Custom Shell'
	.aPopupItem[ 2 ] = 'K'
	.aPopupItem[ 3 ] = 'L'
	.aPopupItem[ 4 ] = 'M'
	.aPopupItem[ 5 ] = 'N'
	.aPopupItem[ 6 ] = 'O'
	.aPopupItem[ 7 ] = 'P'
	.aPopupItem[ 8 ] = 'Q'
	la_PopupHandle[ 12 ] = .CreatePopup( 310001, 12 )
	.SetSubPopup( la_PopupHandle[ 3 ], 2, 12 )

	*** Create popup (index no. = 13)
	.CreatePopupItem( 5 )
	.aPopupItem[ 1 ] = 'Custom SubShell'
	.aPopupItem[ 2 ] = 'S'
	.aPopupItem[ 3 ] = 'P'
	.aPopupItem[ 4 ] = 'D'
	.aPopupItem[ 5 ] = 'F'
	la_PopupHandle[ 13 ] = .CreatePopup( 320001, 13 )
	.SetSubPopup( la_PopupHandle[ 3 ], 3, 13 )

	*** Create popup (index no. = 14)
	.CreatePopupItem( 3 )
	.aPopupItem[ 1 ] = 'Data Block (X) without F(X)'
	.aPopupItem[ 2 ] = 'Variable'
	.aPopupItem[ 3 ] = 'Method Refrence'
	la_PopupHandle[ 14 ] = .CreatePopup( 330001, 14 )
	.SetSubPopup( la_PopupHandle[ 3 ], 4, 14 )

	** Set Submenu to MainMenu
	.SetSubmenu( 1, 1 )
	.SetSubmenu( 2, 2 )
	.SetSubmenu( 3, 3 )
	.SetSubmenu( 4, 4 )
	.SetSubmenu( 5, 5 )
	.SetSubmenu( 6, 6 )
	.SetSubmenu( 7, 7 )
	.SetSubmenu( 8, 8 )
	.SetSubmenu( 9, 9 )
	.SetSubmenu( 10, 10 )
	.BindMessages()
	Release la_PopupHandle
	Activate menu (.cMenuName) nowait
	.SetMenuBarColor( .GetBrightColor( GetSysColor( 2 ), 108 ))
EndWith

Read events
*po_Menu = Null
*Release po_Menu

*On key label ALT+F10
*On shutdown
*Release popup all
*Clear class PopupMenu
*Clear resources
*Release procedure COOLMENU
*Set SysMenu to default
*Set SysMenu NoSave


******************************************


Procedure QuitProg
	Clear events
EndProc


Procedure OnSelection( tn_MenuPos, tn_ItemId )
	Do case
		Case (m.tn_MenuPos == 1)
			Do Proc_FileVAR with ;
				m.tn_MenuPos, m.tn_ItemId - 100000

		Case (m.tn_MenuPos == 2)
			Do Proc_Edit with ;
				m.tn_MenuPos, m.tn_ItemId - 200000

		Case (m.tn_MenuPos == 3)
			Do Proc_DataUnit with ;
				m.tn_MenuPos, m.tn_ItemId - 300000

		Case (m.tn_MenuPos == 4)
			Do Proc_CodeUnit with ;
				m.tn_MenuPos, m.tn_ItemId - 400000

		Case (m.tn_MenuPos == 5)
			Do Proc_VetoUnit with ;
				m.tn_MenuPos, m.tn_ItemId - 500000

		Case (m.tn_MenuPos == 6)
			Do Proc_RPWI with ;
				m.tn_MenuPos, m.tn_ItemId - 600000

		Case (m.tn_MenuPos == 7)
			Do Proc_Transporte with ;
				m.tn_MenuPos, m.tn_ItemId - 700000

		Case (m.tn_MenuPos == 8)
			Do Proc_Package with ;
				m.tn_MenuPos, m.tn_ItemId - 800000

		Case (m.tn_MenuPos == 9)
			Do Proc_Tools with ;
				m.tn_MenuPos, m.tn_ItemId - 900000

		Case (m.tn_MenuPos == 10)
			Do Proc_Help with ;
				m.tn_MenuPos, m.tn_ItemId - ******

		Case (m.tn_MenuPos == 11)
			Do Proc_EDIT_Search with ;
				m.tn_MenuPos, m.tn_ItemId - 210000

		Case (m.tn_MenuPos == 12)
			Do Proc_DATAUNIT_NewShell with ;
				m.tn_MenuPos, m.tn_ItemId - 310000

		Case (m.tn_MenuPos == 13)
			Do Proc_DATAUNIT_NewSubShel with ;
				m.tn_MenuPos, m.tn_ItemId - 320000

		Case (m.tn_MenuPos == 14)
			Do Proc_DATAUNIT_NewElectro with ;
				m.tn_MenuPos, m.tn_ItemId - 330000

		Otherwise
			Wait 'WM_DOCOMMAND: ' + transform( m.tn_MenuPos ) + '  ' + ;
				transform( m.tn_ItemId ) window nowait
	EndCase
EndProc


Procedure Proc_FileVAR( tn_MenuPos, tn_ItemPos )
	Do case
		Case (m.tn_ItemPos == 1)
			S_Menu = "1_1"

		Case (m.tn_ItemPos == 2)
			S_Menu = "1_2"

		Case (m.tn_ItemPos == 3)
			S_Menu = "1_3"

		Case (m.tn_ItemPos == 5)
			S_Menu = "1_4"

		Case (m.tn_ItemPos == 6)
			S_Menu = "1_5"

		Case (m.tn_ItemPos == 8)
			S_Menu = "1_6"

		Otherwise
			Wait 'Proc_FileVAR: ' + transform( m.tn_MenuPos ) + '  ' + ;
				transform( m.tn_ItemPos ) window nowait
	EndCase
EndProc


Procedure Proc_Edit( tn_MenuPos, tn_ItemPos )
	Do case
		Otherwise
			Wait 'Proc_Edit: ' + transform( m.tn_MenuPos ) + '  ' + ;
				transform( m.tn_ItemPos ) window nowait
	EndCase
EndProc


Procedure Proc_DataUnit( tn_MenuPos, tn_ItemPos )
	Do case
		Case (m.tn_ItemPos == 1)
			s_menu = "3_1"

		Case (m.tn_ItemPos == 6)
			S_Menu = "3_9"

		Case (m.tn_ItemPos == 7)
			s_menu = "3_10"

		Case (m.tn_ItemPos == 8)
			s_menu = "edit_shell"

		Case (m.tn_ItemPos == 9)
			s_menu = "edit_subshell"

		Case (m.tn_ItemPos == 11)
			s_menu = "3_11"

		Case (m.tn_ItemPos == 12)
			s_menu = "3_12"

		Case (m.tn_ItemPos == 13)
			s_menu = "3_13"

		Case (m.tn_ItemPos == 14)
			S_menu = "3_14"

		Case (m.tn_ItemPos == 16)
			s_menu = "3_15"

		Case (m.tn_ItemPos == 17)
			s_menu = "3_16"

		Case (m.tn_ItemPos == 18)
			s_menu = "3_17"

		Case (m.tn_ItemPos == 20)
			s_menu = "3_22"

		Case (m.tn_ItemPos == 21)
			s_menu = "3_23"

		Case (m.tn_ItemPos == 22)
			s_menu = "3_24"

		Otherwise
			Wait 'Proc_DataUnit: ' + transform( m.tn_MenuPos ) + '  ' + ;
				transform( m.tn_ItemPos ) window nowait
	EndCase
EndProc


Procedure Proc_CodeUnit( tn_MenuPos, tn_ItemPos )
	Do case
		Case (m.tn_ItemPos == 1)
			s_menu = "Code_New_Circuit"

		Case (m.tn_ItemPos == 2)
			s_menu = "Code_New_Branch"

		Case (m.tn_ItemPos == 3)
			s_menu = "Code_New_Resistance"

		Case (m.tn_ItemPos == 5)
			s_menu = "Code_Edit_Circuit"

		Case (m.tn_ItemPos == 6)
			S_MENU = "Code_Edit_Branch"

		Case (m.tn_ItemPos == 7)
			s_menu = "Code_Edit_Resistance"

		Case (m.tn_ItemPos == 9)
			s_menu = "Code_Delete_Circuit"

		Case (m.tn_ItemPos == 10)
			s_menu = "Code_Delete_Branch"

		Case (m.tn_ItemPos == 11)
			s_menu = "Code_Delete_Resistance"

		Case (m.tn_ItemPos == 13)
			S_Menu = "Main Circuit"

		Case (m.tn_ItemPos == 14)
			S_Menu = "Main Resistance"

		Case (m.tn_ItemPos == 16)
			S_Menu = "Main Switch"

		Case (m.tn_ItemPos == 17)
			S_menu = "Branch Switch"

		Otherwise
			Wait 'Proc_CodeUnit: ' + transform( m.tn_MenuPos ) + '  ' + ;
				transform( m.tn_ItemPos ) window nowait
	EndCase
EndProc


Procedure Proc_VetoUnit( tn_MenuPos, tn_ItemPos )
	Do case
		Case (m.tn_ItemPos == 1)
			S_Menu = "New Veto"

		Case (m.tn_ItemPos == 2)
			S_Menu = "New Channel"

		Case (m.tn_ItemPos == 3)
			S_Menu = "New Connection"

		Case (m.tn_ItemPos == 5)
			S_Menu = "Sender Veto"

		Case (m.tn_ItemPos == 6)
			S_Menu = "Receiver Veto"

		Case (m.tn_ItemPos == 8)
			S_Menu = "Edit Veto"

		Case (m.tn_ItemPos == 9)
			S_Menu = "Edit Channel"

		Case (m.tn_ItemPos == 10)
			S_Menu = "Edit Connection"

		Case (m.tn_ItemPos == 12)
			S_Menu = "Delete Veto"

		Case (m.tn_ItemPos == 13)
			S_Menu = "Delete Channel"

		Case (m.tn_ItemPos == 14)
			S_Menu = "Delete Connection"

		Otherwise
			Wait 'Proc_VetoUnit: ' + transform( m.tn_MenuPos ) + '  ' + ;
				transform( m.tn_ItemPos ) window nowait
	EndCase
EndProc


Procedure Proc_RPWI( tn_MenuPos, tn_ItemPos )
	Do case
		Case (m.tn_ItemPos == 1)
			IF win_rpwi = .f.
			DO FORM rpwi
			ELSE
			FOR I = 1 TO APPLICATION.Forms.Count
				IF APPLICATION.Forms.Item(I).NAME = "RPWIFORM"
					APPLICATION.Forms.Item(I).WINDOWSTATE = 2
					EXIT
				ENDIF
			NEXT
			ENDIF

		Case (m.tn_ItemPos == 4)
			S_Menu = "New Goal"

		Case (m.tn_ItemPos == 5)
			S_MENU = "Edit Goal"

		Case (m.tn_ItemPos == 6)
			S_MENU = "Delete Goal"

		Case (m.tn_ItemPos == 8)
			IF win_dtree = .f.
			DO FORM dtree
			ENDIF

		Case (m.tn_ItemPos == 9)
			IF win_iser = .f.
			DO FORM iser
			ENDIF

		Case (m.tn_ItemPos == 10)
			IF win_riser = .f.
			DO FORM riser
			ENDIF

		Case (m.tn_ItemPos == 11)
			IF win_uiser = .f.
			DO FORM uiser
			ENDIF

		Case (m.tn_ItemPos == 13)
			do form danalysis.scx

		Case (m.tn_ItemPos == 14)
			do form contwr.scx

		Case (m.tn_ItemPos == 15)
			do form dextract.scx

		Case (m.tn_ItemPos == 17)
			do form rextract.scx

		Otherwise
			Wait 'Proc_RPWI: ' + transform( m.tn_MenuPos ) + '  ' + ;
				transform( m.tn_ItemPos ) window nowait
	EndCase
EndProc


Procedure Proc_Transporte( tn_MenuPos, tn_ItemPos )
	Do case
		Case (m.tn_ItemPos == 1)
			IF win_lL = .f.
			DO FORM LANGLIST
			ELSE
			FOR I = 1 TO APPLICATION.Forms.Count
				IF APPLICATION.Forms.Item(I).NAME = "LLFORM"
					APPLICATION.Forms.Item(I).WINDOWSTATE = 2
					EXIT
				ENDIF
			NEXT
			ENDIF

		Case (m.tn_ItemPos == 2)
			IF win_ls = .f.
			DO FORM syntax
			ELSE
			FOR I = 1 TO APPLICATION.Forms.Count
				IF APPLICATION.Forms.Item(I).NAME = "LSFORM"
					APPLICATION.Forms.Item(I).WINDOWSTATE = 2
					EXIT
				ENDIF
			NEXT
			ENDIF

		Case (m.tn_ItemPos == 4)
			IF win_interd = .f.
			DO FORM interd
			ELSE
			FOR I = 1 TO APPLICATION.Forms.Count
				IF APPLICATION.Forms.Item(I).NAME = "INTERDFORM"
					APPLICATION.Forms.Item(I).WINDOWSTATE = 2
					EXIT
				ENDIF
			NEXT
			ENDIF

		Case (m.tn_ItemPos == 7)
			IF win_transd = .f.
			DO FORM transd
			ELSE
			FOR I = 1 TO APPLICATION.Forms.Count
				IF APPLICATION.Forms.Item(I).NAME = "TRANSDFORM"
					APPLICATION.Forms.Item(I).WINDOWSTATE = 2
					EXIT
				ENDIF
			NEXT
			ENDIF

		Otherwise
			Wait 'Proc_Transporte: ' + transform( m.tn_MenuPos ) + '  ' + ;
				transform( m.tn_ItemPos ) window nowait
	EndCase
EndProc


Procedure Proc_Package( tn_MenuPos, tn_ItemPos )
	Do case
		Case (m.tn_ItemPos == 1)
			IF win_NEWPACKAGE = .f.
			DO FORM NEWPACKAGE
			ELSE
			FOR I = 1 TO APPLICATION.Forms.Count
				IF APPLICATION.Forms.Item(I).NAME = "NEWPACKAGEFORM"
					APPLICATION.Forms.Item(I).WINDOWSTATE = 2
					EXIT
				ENDIF
			NEXT
			ENDIF

		Case (m.tn_ItemPos == 3)
			IF win_NEWPACKAGE = .f.
			DO FORM OPENPACKAGE
			ELSE
			FOR I = 1 TO APPLICATION.Forms.Count
				IF APPLICATION.Forms.Item(I).NAME = "OPENPACKAGEFORM"
					APPLICATION.Forms.Item(I).WINDOWSTATE = 2
					EXIT
				ENDIF
			NEXT
			ENDIF

		Case (m.tn_ItemPos == 5)
			IF win_NEWPACKAGE = .f.
			DO FORM INSTALLPACKAGE
			ELSE
			FOR I = 1 TO APPLICATION.Forms.Count
				IF APPLICATION.Forms.Item(I).NAME = "INSTALLPACKAGEFORM"
					APPLICATION.Forms.Item(I).WINDOWSTATE = 2
					EXIT
				ENDIF
			NEXT
			ENDIF

		Otherwise
			Wait 'Proc_Package: ' + transform( m.tn_MenuPos ) + '  ' + ;
				transform( m.tn_ItemPos ) window nowait
	EndCase
EndProc


Procedure Proc_Tools( tn_MenuPos, tn_ItemPos )
	Do case
		Case (m.tn_ItemPos == 1)
			do form toolse

		Case (m.tn_ItemPos == 3)
			do form toolfd

		Case (m.tn_ItemPos == 4)
			do form toolmd

		Case (m.tn_ItemPos == 5)
			do form toolrd

		Case (m.tn_ItemPos == 6)
			do form tooldm

		Case (m.tn_ItemPos == 8)
			do form toolsw

		Case (m.tn_ItemPos == 10)
			S_menu = "Calculator"

		Case (m.tn_ItemPos == 11)
			S_Menu = "NotePad"

		Case (m.tn_ItemPos == 12)
			S_menu = "Paint"

		Otherwise
			Wait 'Proc_Tools: ' + transform( m.tn_MenuPos ) + '  ' + ;
				transform( m.tn_ItemPos ) window nowait
	EndCase
EndProc


Procedure Proc_Help( tn_MenuPos, tn_ItemPos )
	Do case
		Case (m.tn_ItemPos == 1)
			S_MENU = "DoubleS Framework"

		Case (m.tn_ItemPos == 3)
			S_MENU = "DoubleS Research"

		Case (m.tn_ItemPos == 4)
			S_Menu = "DoubleS Lecture"

		Case (m.tn_ItemPos == 5)
			S_menu = "DoubleS Goals"

		Case (m.tn_ItemPos == 6)
			S_menu = "DoubleS FAQ"

		Case (m.tn_ItemPos == 8)
			S_MENU = "DoubleS Library"

		Case (m.tn_ItemPos == 11)
			S_MENU = "(x)Harbour"

		Case (m.tn_ItemPos == 12)
			S_MENU = "MiniGUI"

		Case (m.tn_ItemPos == 13)
			S_MENU = "TSBrowse"

		Case (m.tn_ItemPos == 17)
			S_MENU = "6_2"

		Otherwise
			Wait 'Proc_Help: ' + transform( m.tn_MenuPos ) + '  ' + ;
				transform( m.tn_ItemPos ) window nowait
	EndCase
EndProc


Procedure Proc_EDIT_Search( tn_MenuPos, tn_ItemPos )
	Do case
		Case (m.tn_ItemPos == 1)
			s_menu = "Search 1"

		Case (m.tn_ItemPos == 2)
			s_menu = "Search 2"

		Case (m.tn_ItemPos == 3)
			s_menu = "Search 3"

		Case (m.tn_ItemPos == 4)
			s_menu = "Search 4"

		Otherwise
			Wait 'Proc_EDIT_Search: ' + transform( m.tn_MenuPos ) + '  ' + ;
				transform( m.tn_ItemPos ) window nowait
	EndCase
EndProc


Procedure Proc_DATAUNIT_NewShell( tn_MenuPos, tn_ItemPos )
	Do case
		Case (m.tn_ItemPos == 1)
			s_menu = "shell_custom"

		Case (m.tn_ItemPos == 2)
			s_menu = "3_2_1"

		Case (m.tn_ItemPos == 3)
			s_menu = "3_2_2"

		Case (m.tn_ItemPos == 4)
			s_menu = "3_2_3"

		Case (m.tn_ItemPos == 5)
			s_menu = "3_2_4"

		Case (m.tn_ItemPos == 6)
			s_menu = "3_2_5"

		Case (m.tn_ItemPos == 7)
			s_menu = "3_2_6"

		Case (m.tn_ItemPos == 8)
			s_menu = "3_2_7"

		Otherwise
			Wait 'Proc_DATAUNIT_NewShell: ' + transform( m.tn_MenuPos ) + '  ' + ;
				transform( m.tn_ItemPos ) window nowait
	EndCase
EndProc


Procedure Proc_DATAUNIT_NewSubShel( tn_MenuPos, tn_ItemPos )
	Do case
		Case (m.tn_ItemPos == 1)
			S_MENU = "subshell_custom"

		Case (m.tn_ItemPos == 2)
			S_MENU = "3_3_1"

		Case (m.tn_ItemPos == 3)
			S_MENU = "3_3_2"

		Case (m.tn_ItemPos == 4)
			S_MENU = "3_3_3"

		Case (m.tn_ItemPos == 5)
			S_MENU = "3_3_4"

		Otherwise
			Wait 'Proc_DATAUNIT_NewSubShel: ' + transform( m.tn_MenuPos ) + '  ' + ;
				transform( m.tn_ItemPos ) window nowait
	EndCase
EndProc


Procedure Proc_DATAUNIT_NewElectro( tn_MenuPos, tn_ItemPos )
	Do case
		Case (m.tn_ItemPos == 1)
			S_Menu = "3_4_1"

		Case (m.tn_ItemPos == 2)
			S_Menu = "3_4_2"

		Case (m.tn_ItemPos == 3)
			S_Menu = "3_4_3"

		Otherwise
			Wait 'Proc_DATAUNIT_NewElectro: ' + transform( m.tn_MenuPos ) + '  ' + ;
				transform( m.tn_ItemPos ) window nowait
	EndCase
EndProc
