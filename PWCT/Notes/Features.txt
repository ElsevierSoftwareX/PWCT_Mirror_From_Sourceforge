 
===================================================================================
Great!! Some -select all subchilds- button would be greatly appreciated haha\
===================================================================================

Another feature which might be great (would make things a lot quicker when creating new interactions) would be, for the interaction pages generator to:
- Generate also a transporter file in the corresponding folder with the same name of the IDF being created, 
open it in the transporter editor, then generate page 1 and link them together. That would greatly improve
 the speed at which we can generate those.
- Also, for the destination folder, suggest the folder which was last used as IDF folder, so we dont have 
to navigate there each time.
Just suggestions, I know its too much work but that would make generating new scripts a lot faster in my 
opinion. I will be creating as much IDF files as i need on the incoming weeks, and will upload them all 
when I think I already have all that I need hehe (for avoiding spaming the post). Love the software!

===================================================================================

 - More on the interaction generator:

I think it could automatically generate full interactions directly from user defined functions
 through the goal designer. I say this because I have been defining some functions, then trying to
 transform them into Interactions, and not getting them to work, and they were working as functions.
 (I know I must learn and study more your software, but the point Im trying to make is that if that was 
automatic, It would speed up the Interaction creation process a lot, because every single function any
 user created would mean the software will have another interaction, thus making it really really
 versatile and fast growing. A whole new language can be created from scratch only by manually 
adding the function definition interaction, then the rest can be done through the goal designer)

- How to do it:

Now, the current interaction "Define Function" (IDF12.IDF) actually requires the Function Name, 
and the parameters.

It can be done that the Interaction Generator picks the function name and generates the .IDF and .TRF 
with such name (overwritting if exists for instance). [We have the files names]

The interaction IDF can also be automatically generated by generating a Textbox for each parameter, 
which will give us the variables to use. If we happen to name the parameters correct names that
 identify the ussage they provide, then the caption for each textbox can be that same name. For instance:

Function being:

RemoveCarriageReturnsFromList(ListName)

Can generate:

- RemoveCarriageReturnsFromList.IDF
It will have a TextBox with name "ListName" on it. This way we already have the IDF automatically generated, 
and the imput is intuitively the list name. The variable they generate should have the Parameter name.
Another option would be to ask the user for a caption, in a very similar way to how its done actually. 
[We have the IDF, and the variables from it]

- RemoveCarriageReturnsFromList.TRF
Interaction pages: automatically generated page that links to the IDF file
Matching: The parameters in the function definition happen to have the same name as the code uses them, 
so the matching can be done by matching both the parameters with the very same variable names used in the script.
The code mask: Since we have the variables already grabbed and defined in the IDF and matched 
in the matching part of the TRF, we just have to use the code extractor
 to copy and paste the code generated by the user defined function, and (optionally) asign 
it a <RPWI:NEWSTEP> caption defined by the user, that is the only part I dont see how to automate yet, 
so the user has to also define the <RPWI:NEWSTEP>, but the rest can be automatically done.

- Then, for finishing with the Auto add the recently created component to 
the default domain tree and save the list

This way, we have automated the whole Interaction creation process,
 out of user defined functions.

Because we can assume we are going to get many languages and interactions defined by users this way,
 It would also be good that when the user has to define the <RPWI:NEWSTEP>, he can also define 
a small description to the interaction (description of what the function does) 
just in case the Interaction name alone is not enough for other users than him.

This information should be shown when searching components in domain.

Also, for when the user is searching components when writting goals in the goal designer, 
I think it should do the search matches both by any part of the name
 (IE if I write "variable", it will show the components which have that on its name, even 
if they dont start by that) and also it should only show the matching results
 regardles of its domain, so we will easily navigate among other user created 
interactions easily finding what we need by doing that.

Notice that once this is avilable, a full new language interactions can be created out
 of user defined functions (just by manually creating the function definition interaction), 
for instance, how to create assignment:
Assignment(Var1,Var2)
{
Var1=Var2
}

And then the interaction generator can generate the interaction Assignment as it is currently defined for python, 
with a few clicks, same for all new interactions.

More features can be added with time after we see this done, such as interactions with checkbox or lists, 
although given the fantastic piece of software you already generated, I bet you will come with solutions
 when programming this, if you happen to find this idea useful or worth to implement

As a note on software eficency, It could be done in later stages, that when the user uses more than one
 time long Interactions, they are defined as a function in the program and called upon as it,
 for avoiding duplicating the code, but this is not important right now.

If you happen to find this useful and finally create it, I think once we can see it done we 
will have more ideas on automating the whole process (IE managing the variables so user doesn't 
have to write to change them when he calls an Interaction, just copy and paste
 (or maybe click a button with the variable name), and then the functions use
 default variables all the time) I have some more ideas for further automation 
and speed up the programming process but cant materialize or explain them yet
 without being able to see what I just described..

I apologize for the length of the text, hope you find it useful in any way, please tell me if so,
 and if not, Im still very thankful for the time you invested reading and considering this.

===================

But

We have 3 types of components ( [1] Basic components [2] Code Blocks [3] Advanced components ) ... [1] For Basic components we don't need to create it using automation from goal designer because the basic components wraps the core features of the programming language like (Assignment, If Statement, ... etc) and we don't need to create Assignment component from another Assignment component (We don't need to create the same components two times ) .... [2] For Code Blocks It's not required to be components because we can use Functions/Methods then we will call it to avoid generating the same code again and again ... but here we need to make calling functions an easy process by showing dynamic components for calling functions and this dynamic process should be done by the goal designer without any actions from the user where the user can select the function name then enter the function parameters easily using separate textbox for each parameter.... [3] For Advanced components, here we can use your ideas because the component is not an isolated function to call, the component could be an idea for use with other basic/advanced components to form another algorithm, for example scanning two arrays using two for loops (one inside one) is useful for many algorithms, when the user uses a component like this, he can make custom changes by inserting steps in different locations ( imagine if-else structure where the user can add step after if or after else ) here we see the power of creating new components without code duplication, it's the reuse of language alphabetics, the visual language (PythonPWCT) alphabetics must be a collection of Basic & Advanced components (no code blocks, but we can use libraries of functions/classes) ... With respect to Advanced components automation using your ideas, ... we can add a wizard to the goal designer where the user select a sub steps tree then run this wizard and this wizard will the ask the user the next questions (1 - component name 2 - parameters based of the analysis of the sub steps tree where the parameters will be selected 3 - location of the component in the domain tree ) then the wizard will create everything automatically and this includes the interaction page and the transporter file (link to interaction page, code mask & matching)