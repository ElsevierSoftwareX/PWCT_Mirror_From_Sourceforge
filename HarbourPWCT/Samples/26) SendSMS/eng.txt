Dynamic Library description SMS 
1 shows the external interface function 
First, start the service int _stdcall SMSStartService (int nPort, DWORD BaudRate = 57600, int Parity = 2, int DataBits = 8, int StopBits = 0, int FlowControl = 0, char * csca = "card") 

Parameters: nPort such as a serial number that COM1 
Special rate BaudRate dial 115200 
Parity check bit 2 
DataBits data bit 8 
StopBits stop bit 0 
FlowControl Flow Control 0 
Csca SMS center number, you can use the default value, if set the format, such as: "+8613800591500" 

   Return Value: 1 succeeded, 0 failed 

Second, send a short message DWORD _stdcall SMSSendMessage (char * Msg, char * PhoneNo) 

Parameters: Msg message content, if the Chinese are a maximum of 70 characters, more than 70 characters Division Multiple SMS sending 
           If all the English are a maximum of 140 characters, and the surplus in more than 140 points Send 
      PhoneNo target number of formats, such as "13800591500" 


 Return value meaningless, check messages, call function, the success of four 

3, receive short messages int _stdcall SMSGetNextMessage (SMSMessageStruct * Msg) 

Class structure is as follows 
typedef struct _sms_msg_t_ 
( 
char Msg [256]; / / message content 
char PhoneNo [32]; / / other phone number 
char ReceTime [32]; / / Receive time 
) SMSMessageStruct; 

Read the short message parameters Msg 
Back to message 0 No 1 Yes 
Fourth, check to send a status report int _stdcall SMSReport (SMSReportStruct * rept) 

5, stop the service int _stdcall SMSStopSerice () 

6, the last error int _stdcall SMSGetLastError (char * err) 

Content for the error parameter err 
Return error length 

2 call the method and use cases 
2.1.1 Statement 
/ / Message structure type declaration 
typedef struct _sms_msg_t_ 
( 
char Msg [256]; / / message contents 
char PhoneNo [32]; / / other phone number 
char ReceTime [32]; / / Receive time 
) SMSMessageStruct; 

/ / Message status reporting structure type declaration 
typedef struct _sms_report_t_ 
( 
DWORD index; / / Short Message ID: index, increasing from 0 
char Msg [256]; / / message content 
int Success; / / whether to send the success of 0 to fail, non-0 for success 
char PhoneNo [32]; / / target mobile phone number 
) SMSReportStruct; 

/ / Start the service function type description 
typedef int (_stdcall * pSMSStartServiceFun) (int nPort, DWORD BaudRate = 57600, int Parity = 2, int DataBits = 8, int StopBits = 0, int FlowControl = 0, char * csca = "card"); 
/ / Read SMS function type description 
 typedef int (_stdcall * pSMSGetNextMessageFun) (SMSMessageStruct * Msg); 
 / / Send a message type description 
typedef DWORD (_stdcall * pSMSSendMessageFun) (char * Msg, char * PhoneNo); 
/ / Read the status report type description 
typedef int (_stdcall * pSMSReportFun) (SMSReportStruct * rept); 
/ / Stop the service function type description 
typedef int (_stdcall * pSMSStopSericeFun) (); 
2.1.2 Process Call 
HINSTANCE hDll = LoadLibrary ("MC8331AT.dll"); / / call the program directory need to have this dynamic library file 
pSMSSendMessageFun SMSSendMessageFun; / / function definition 
SMSSendMessageFun = (pSMSSendMessageFun) GetProcAddress (hDll, "SMSSendMessage"); 
/ / Get function pointer 
If (SMSSendMessageFun! = NULL) 
SMSSendMessageFun ("message content", "phone number"); 
/ / Send SMS 
FreeLibrary (hDll); / / release dynamic library 
3 Notes 
1, SMSStartService and SMSStopSerice should match occurs, the process must release resources before exiting 
2, SMSGetNextMessage the need for a timer, and thread management. If the text more than call this function, the new message will overwrite the previous unread message 